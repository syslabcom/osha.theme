
    >>> self.loginAsPortalOwner()

We need the language tool for this. Make sure start_neutral is set to 0 (it's
 the default, 
but using belts and suspenders won't harm us...)

    >>> ltool = self.portal.portal_languages
    >>> ltool.start_neutral = 0

Add two more language beside English to the language tool.

    >>> ltool.addSupportedLanguage('da')
    >>> ltool.addSupportedLanguage('de')
    >>> ltool.getSupportedLanguages()
    ['en', 'da', 'de']

The default language is English.

    >>> ltool.getPreferredLanguage()
    'en'



Now we add a document (which is translatable) to the folder.

    >>> _ = folder.invokeFactory(id='doc', type_name='RichDocument')
    >>> doc = folder[_]
    >>> doc.Language()
    'en'

Now we translate the folder

    >>> folder.addTranslation('da')

Now we get a handle to the translated Folder    
    
    >>> folder_da = folder.getTranslation('da')

Now we check that the Language of the folder realy is Danish    
    
    >>> folder_da.Language()
    'da'

And that the Language of the Orignal Folder is English by now    
    >>> folder.Language()
    'en'

The document receives a title.

    >>> doc.setTitle('English title')
    >>> doc.Title()
    'English title'

We add a Danish translation of that document.

    >>> doc.addTranslation('da')
    >>> doc_da = doc.getTranslation('da')
    >>> doc_da.Language()
    'da'
    >>> doc_da.aq_parent==folder_da
    True

And the Danish version also gets a title.

    >>> doc_da.setTitle('Danish title')
    >>> doc_da.Title()
    'Danish title'

We set the Context to the Documentobject

    >>> lt=doc.restrictedTraverse("@@linguatools")

we Call the functiohn setTitle and change the Title to my Title in all languges.

    >>> _ = lt.setTitle("myTitle")

now we check that the Title has been changed in English and Danish
    
    >>> doc_da.Title()
    'myTitle'
    >>> doc.Title()
    'myTitle'

now we check the the setRichDocAttachments()
first we make sure that getDisplayAttachments is set to true in English and Danish Language branches.

    >>> doc.getDisplayAttachments()
    True
    >>> doc_da.getDisplayAttachments()
    True

then we call the Method setRichDocAttachments, and check if getDisplayAttachments gives us False in Danish and English after the call.

    >>> _ = lt.setRichDocAttachments(False)
    >>> doc.getDisplayAttachments()
    False
    >>> doc_da.getDisplayAttachments()
    False

now we check the setExcludeFromNav method the same way. First we make sure the Document is included in the Nav in English and Danish Branch.   
    
    >>> doc.getExcludeFromNav()
    False

    >>> doc_da.getExcludeFromNav()
    False

then we call the method setExcludeFromNav(True) to exclude the Docs in all Language Branches from the Nav. 

    >>> _ = lt.setExcludeFromNav(True)

And finally we test again in English and Danish whether the Document has been excluded from nav.

    >>> doc.getExcludeFromNav()
    True

    >>> doc_da.getExcludeFromNav()
    True

Now we set the Context from Document to folder for further Methodtests, whish function only with folderish Objects.

    >>> lt=folder.restrictedTraverse("@@linguatools")

Now we check the Functionality of the setEnableNextPrevious() method
First, as allways, we test the starting status in English and Danish

    >>> folder.getNextPreviousEnabled()
    False
    >>> folder_da.getNextPreviousEnabled()
    False
    
now we call the Method setEnableNextPrevious(True) to enable the Next Previous Navigation in all Languages.

    >>> _ = lt.setEnableNextPrevious(True)

Finally we test again whether our alteration took Effect in English and Danish.	

    >>> folder.getNextPreviousEnabled()
    True
    >>> folder_da.getNextPreviousEnabled()
    True
